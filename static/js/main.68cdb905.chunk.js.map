{"version":3,"sources":["components/Navigation.tsx","components/Header.tsx","components/Experience.tsx","components/Projects.tsx","components/Skills.tsx","containers/App.tsx","serviceWorker.ts","providers/databaseProvider.tsx","index.tsx"],"names":["Navigation","props","NavigationContainer","className","NavigationLink","to","styled","div","NavLink","Header","HeaderContainer","ContactInfo","Name","join","Email","Phone","HeaderLinks","NavigationLinks","SocialLinks","title","url","map","link","index","SocialLink","href","target","ul","li","a","Experience","experience_query","gql","useQuery","data","loading","error","Loading","experience","content","ExperienceContainer","ContainerHeader","ContainerHr","job","ExperienceStyled","Company","company","Role","role","Duration","duration","Location","location","Highlights","highlights","highlight","Highlight","h1","hr","Projects","projects_query","projects","ProjectsContainer","project","links","Link","tools","tool","Tool","ProjectStyled","Title","date","LinksSection","Links","HighlightSection","ToolsSection","Tools","Date","Skills","skills_query","skills","SkillsContainer","SkillsListsContainer","SkillList","SkillType","StyledHr","languages","language","Skill","frameworks","framework","dev_tools","dev_tool","App","AppContainer","AppView","exact","path","component","Boolean","window","hostname","match","REALM_APP_ID","graphql_url","app","Realm","id","getValidAccessToken","currentUser","logIn","anonymous","refreshCustomData","accessToken","client","ApolloClient","HttpLink","uri","fetch","options","headers","authenticatedOptions","Authorization","cache","InMemoryCache","DatabaseProvider","children","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.68cdb905.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport { NavLink, LinkProps } from 'react-router-dom';\r\n\r\nconst Navigation = (props: any) => {\r\n  return (\r\n    <NavigationContainer className={props.className}>\r\n        <NavigationLink to=\"/skills\">skills</NavigationLink>\r\n        <NavigationLink to=\"/experience\">experience</NavigationLink>\r\n        <NavigationLink to=\"/projects\">projects</NavigationLink>\r\n    </NavigationContainer>\r\n  )\r\n}\r\nexport default Navigation;\r\n\r\n\r\n\r\n\r\nconst NavigationContainer = styled.div`\r\n    width: 100%;\r\n`;\r\n\r\nconst NavigationLink = styled(NavLink)`\r\n    margin-right: 15px;\r\n    font-size: calc(10px + 2vmin);\r\n    color: #888;\r\n\r\n    &:hover {\r\n        color: #000;\r\n    }\r\n`;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport Navigation from './Navigation';\r\n\r\nconst Header = () => {\r\n  const first_name = \"Jonathan\";\r\n  const last_name = \"Crawford\";\r\n  const email = \"jonathantcrawford@icloud.com\";\r\n  const phone = \"(585)-520-6582\";\r\n  const links = [\r\n    {title: \"linkedin\", url: \"https://www.linkedin.com/in/jonathantcrawford/\"},\r\n    {title: \"github\", url: \"https://github.com/jonathantcrawford\"}\r\n  ]; \r\n\r\n  return (\r\n    <HeaderContainer>\r\n      <ContactInfo>\r\n        <Name>{[first_name,last_name].join(\" \")}</Name>\r\n        <Email>{email}</Email>\r\n        <Phone>{phone}</Phone>\r\n      </ContactInfo>\r\n      <HeaderLinks>\r\n        <NavigationLinks/>\r\n        <SocialLinks>\r\n          {links.map((link:any,index: any) => <SocialLink key={index} href={link.url} target=\"_blank\">{link.title}</SocialLink>)}\r\n        </SocialLinks>\r\n      </HeaderLinks>\r\n    </HeaderContainer>\r\n  )\r\n}\r\nexport default Header;\r\n\r\nconst HeaderContainer = styled.div`\r\n  width: 100%;\r\n  min-height: 10vh;\r\n  margin: 0px;\r\n  padding: 4vh 8vw 2vh 8vw;\r\n  box-sizing: border-box;\r\n  display: block;\r\n`;\r\n\r\nconst ContactInfo = styled.ul`\r\n  height: 100%;\r\n  list-style-type: none;\r\n  margin: 0;\r\n  padding-left: 0;\r\n`;\r\n\r\nconst Name = styled.li`\r\n  font-size: calc(16px + 2vmin);\r\n  color: black;\r\n  line-height: 2em;\r\n`;\r\n\r\nconst Email = styled.li`\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n  line-height: 1.5em;\r\n`;\r\n\r\nconst Phone = styled.li`\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n  line-height: 1.5em;\r\n`;\r\n\r\nconst HeaderLinks = styled.div`\r\n  margin-top: 6vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap-reverse;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst NavigationLinks = styled(Navigation)`\r\n  flex: 4;\r\n  margin-bottom: 1em;\r\n`\r\n\r\nconst SocialLinks = styled.div`\r\n  flex: 1;\r\n  align-self: flex-end;\r\n  margin-bottom: 1em;\r\n`;\r\n\r\nconst SocialLink = styled.a`\r\n  margin-right: 15px;\r\n  font-size: calc(10px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst Experience = () => {\r\n  const experience_query = gql`{ \r\n    content {\r\n      experience {\r\n          company\r\n          duration\r\n          highlights\r\n          location\r\n          role\r\n      }\r\n    }\r\n  }`;\r\n    const { data, loading, error } = useQuery(experience_query);\r\n    if (loading) return (<Loading>...loading</Loading>);\r\n    const { content } = data;\r\n    const { experience } = content;\r\n  return (\r\n    <ExperienceContainer>\r\n      <ContainerHeader>experience</ContainerHeader>\r\n      <ContainerHr></ContainerHr>\r\n      {experience.map((job:any, index:any) => {\r\n          return (\r\n            <ExperienceStyled key={index}>\r\n              <Company>{job.company}</Company>\r\n              <Role>{job.role}</Role>\r\n              <Duration>{job.duration}</Duration>\r\n              <Location>{job.location}</Location>\r\n              <Highlights>\r\n                {job.highlights.map((highlight: any, index: any) => <Highlight key={index}>{highlight}</Highlight>)}\r\n              </Highlights>\r\n            </ExperienceStyled>);\r\n          })}\r\n    </ExperienceContainer>\r\n  );\r\n}\r\nexport default Experience;\r\n\r\nconst ExperienceContainer = styled.div`\r\n  background-color: #fff;\r\n  max-width: 100%;\r\n  margin: 0px;\r\n  padding: 0 8vw 0 8vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst ExperienceStyled = styled.div`\r\n  margin-bottom: 10vh;\r\n`;\r\n\r\nconst Company = styled.div`\r\n  font-size: calc(10px + 2vmin);\r\n  line-height: 1.6em;\r\n`;\r\n\r\nconst Role = styled.div`\r\n  font-size: calc(8px + 2vmin);\r\n  line-height: 1.6em;\r\n`;\r\n\r\nconst Duration = styled.div`\r\n  font-size: calc(8px + 2vmin);\r\n  line-height: 1.6em;\r\n`;\r\n\r\nconst Location = styled.div`\r\n  font-size: calc(8px + 2vmin);\r\n  line-height: 1.6em;\r\n`;\r\n\r\nconst Highlights = styled.ul`\r\n  padding-inline-start: 20px;\r\n  margin-top: 5vh;\r\n`;\r\n\r\nconst Highlight = styled.li`\r\n  margin: 2vh 0 2vh 0;\r\n  line-height: 1.6em;\r\n`;\r\n\r\nconst ContainerHeader = styled.h1`\r\n  font-size: calc(10px + 2vmin);\r\n  color: #000;\r\n`;\r\n\r\nconst ContainerHr = styled.hr`\r\n  width: 50%;\r\n  margin: 0 5vw 5vh 0;\r\n  border: 1px solid #000;\r\n`;\r\n\r\nconst Loading = styled.div`\r\n  margin: auto;\r\n  padding: 0 8vw 0 8vw;\r\n`;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\n\r\n\r\nconst Projects = () => {\r\n  const projects_query = gql`{ \r\n    content {\r\n      projects {\r\n            title\r\n            tools\r\n            highlights\r\n            links {\r\n            title\r\n            url\r\n            }\r\n            date\r\n        }\r\n    }\r\n  }`;\r\n  const { data, loading, error } = useQuery(projects_query);\r\n  if (loading) return (<Loading>...loading</Loading>);\r\n  const { content } = data;\r\n  const { projects } = content;\r\n  return (\r\n    <ProjectsContainer>\r\n        <ContainerHeader>projects</ContainerHeader>\r\n        <ContainerHr></ContainerHr>\r\n        {projects.map((project:any, index:any) => {\r\n            const links = project.links.map((link:any,index:any) => <Link key={index} href={link.url} target=\"_blank\">{link.title}</Link>);\r\n            const  highlights = project.highlights.map((highlight:any, index:any) => <Highlight key={index}>{highlight}</Highlight>);\r\n            const  tools = project.tools.map((tool:any, index:any) => <Tool key={index}>{tool}</Tool>);\r\n            return (\r\n            <ProjectStyled key={index}>\r\n              <Title>{project.title}</Title>\r\n              <Date>{project.date}</Date>\r\n              <LinksSection>\r\n                <Links>{links}</Links>\r\n              </LinksSection>\r\n              <HighlightSection>{highlights}</HighlightSection>\r\n              <ToolsSection>\r\n                <Tools> {tools}</Tools>\r\n              </ToolsSection>\r\n            </ProjectStyled>\r\n          )})}\r\n    </ProjectsContainer>\r\n  );\r\n}\r\nexport default Projects;\r\n\r\n\r\nconst ProjectsContainer = styled.div`\r\n  height: 100%;\r\n  background-color: #fff;\r\n  max-width: 100%;\r\n  margin: 0px;\r\n  padding: 0 8vw 0 8vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst ContainerHeader = styled.h1`\r\n  font-size: calc(10px + 2vmin);\r\n  color: #000;\r\n`;\r\n\r\nconst ContainerHr = styled.hr`\r\n  width: 50%;\r\n  margin: 0 5vw 5vh 0;\r\n  border: 1px solid #000;\r\n`;\r\n\r\n\r\nconst ProjectStyled = styled.div`\r\n  margin: 0 5vw 5vh 0;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  font-size: calc(10px + 2vmin);\r\n  line-height: 1.5em;\r\n`;\r\n\r\nconst Date = styled.div`\r\n  font-size: calc(8px + 2vmin);\r\n  line-height: 1.5em;\r\n`;\r\n\r\nconst HighlightSection = styled.ul`\r\n  padding-inline-start: 20px;\r\n`;\r\n\r\nconst ToolsSection = styled.ul`\r\n  padding-inline-start: 0px;\r\n  box-sizing: border-box;\r\n  list-style-type: none;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-content: flex-start;\r\n  justify-content: flex-start;\r\n  flex-wrap: wrap;\r\n  font-size: calc(12px + 2vmin);\r\n  color: black;\r\n`;\r\nconst LinksSection = styled.ul`\r\n  padding-inline-start: 0px;\r\n  box-sizing: border-box;\r\n  list-style-type: none;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-content: flex-start;\r\n  justify-content: flex-start;\r\n  flex-wrap: wrap;\r\n  font-size: calc(12px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Highlight = styled.li`\r\n  margin: 2vh 0 2vh 0;\r\n`;\r\n\r\nconst Links = styled.li`\r\n  display: inline-block;\r\n`;\r\n\r\nconst Link = styled.a`\r\n  margin-right: 15px;\r\n  font-size: calc(10px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Tools = styled.li`\r\n  display: inline-block;\r\n`;\r\n\r\nconst Tool = styled.a`\r\n  background-color: #DDD;\r\n  border-radius: 8px;\r\n  padding: 1vh 1vw 1vh 1vw;\r\n  margin-right: calc(10px + 1vmin);\r\n  font-size: calc(10px + 1vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Loading = styled.div`\r\n  margin: auto;\r\n  padding: 0 8vw 0 8vw;\r\n`;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\n\r\nconst Skills = () => {\r\n  const skills_query = gql`{ \r\n    content {\r\n      skills {\r\n          languages\r\n          frameworks\r\n          dev_tools\r\n      }\r\n    }\r\n  }`;\r\n  const { data, loading, error } = useQuery(skills_query);\r\n  if (loading) return (<Loading>...loading</Loading>);\r\n  const { content } = data;\r\n  const { skills } = content;\r\n\r\n  return (\r\n    <SkillsContainer>\r\n      <ContainerHeader>skills</ContainerHeader>\r\n      <ContainerHr></ContainerHr>\r\n      <SkillsListsContainer>\r\n          <SkillList>\r\n            <SkillType>languages</SkillType>\r\n            <StyledHr></StyledHr>\r\n            {skills.languages.map((language:any, index: any) => <Skill key={index}>{language}</Skill>)}\r\n          </SkillList>    \r\n          <SkillList>\r\n            <SkillType>frameworks</SkillType>\r\n            <StyledHr></StyledHr>\r\n            {skills.frameworks.map((framework: any, index: any) => <Skill key={index}>{framework}</Skill>)}\r\n          </SkillList>\r\n          <SkillList>\r\n            <SkillType>dev_tools</SkillType>\r\n            <StyledHr></StyledHr>\r\n            {skills.dev_tools.map((dev_tool: any, index: any) => <Skill key={index}>{dev_tool}</Skill>)}\r\n          </SkillList>\r\n        </SkillsListsContainer>\r\n    </SkillsContainer>\r\n  );\r\n}\r\nexport default Skills;\r\n\r\nconst SkillsContainer = styled.div`\r\n  background-color: #fff;\r\n  max-width: 100%;\r\n  margin: 0px;\r\n  padding: 0 8vw 0 8vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst SkillsListsContainer = styled.div`\r\n  box-sizing: border-box;\r\n  background-color: #fff;\r\n  max-width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst SkillList = styled.ul`\r\n  list-style-type: none;\r\n  margin: 0 5vw 5vh 0;\r\n  padding: 0;\r\n  font-size: calc(8px + 2vmin);\r\n  color: #888;\r\n`;\r\n\r\nconst SkillType = styled.li`\r\n  font-size: calc(10px + 2vmin);\r\n  color: #000;\r\n`;\r\n\r\nconst StyledHr = styled.hr`\r\n  width: 100%;\r\n  border: 1px solid #000;\r\n`;\r\n\r\nconst Skill = styled.li`\r\n  line-height: 1.5em;\r\n`;\r\n\r\nconst ContainerHeader = styled.h1`\r\n  font-size: calc(10px + 2vmin);\r\n  color: #000;\r\n`;\r\n\r\nconst ContainerHr = styled.hr`\r\n  width: 50%;\r\n  margin: 0 5vw 5vh 0;\r\n  border: 1px solid #000;\r\n`;\r\n\r\nconst Loading = styled.div`\r\n  margin: auto;\r\n  padding: 0 8vw 0 8vw;\r\n`;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport Header from '../components/Header';\r\nimport Experience from '../components/Experience';\r\nimport Projects from '../components/Projects';\r\nimport Skills from '../components/Skills';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\n\r\nconst App = () => {\r\n  return (\r\n    <AppContainer>\r\n      <Header/>\r\n      <AppView>\r\n        <Switch>\r\n          <Route exact path=\"/experience\" component={Experience}></Route>\r\n          <Route exact path=\"/skills\" component={Skills}></Route>\r\n          <Route exact path=\"/projects\" component={Projects}></Route>\r\n          <Route path=\"*\">\r\n            <Redirect to=\"/experience\" />\r\n        </Route>\r\n        </Switch>\r\n      </AppView>\r\n    </AppContainer>\r\n  );\r\n};\r\nexport default App;\r\n\r\nconst AppContainer = styled.div`\r\n  height: 100vh;\r\n  box-sizing: border-box;\r\n  background-color: white;\r\n  width: 100%;\r\n  display: block;\r\n  font-size: calc(10px + 2vmin);\r\n`;\r\n\r\nconst AppView = styled.div``;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport * as Realm from \"realm-web\";\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  HttpLink,\r\n  InMemoryCache\r\n} from \"@apollo/client\";\r\n\r\nconst REALM_APP_ID = \"resume-realm-nxcpz\"; // e.g. myapp-abcde\r\nconst graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${REALM_APP_ID}/graphql`;\r\n\r\nconst app: Realm.App = new Realm.App({ id: REALM_APP_ID });\r\nconst getValidAccessToken = async () => {\r\n    if (!app.currentUser) {\r\n        // If no user is logged in, log in an anonymous user\r\n        await app.logIn(Realm.Credentials.anonymous());\r\n    } else {\r\n        // The logged in user's access token might be stale,\r\n        // Refreshing custom data also refreshes the access token\r\n        await app.currentUser.refreshCustomData();\r\n    }\r\n    // Get a valid access token for the current user\r\n    return app.currentUser?.accessToken;\r\n}\r\n  \r\nconst client = new ApolloClient({\r\n    link: new HttpLink({\r\n        uri: graphql_url,\r\n        fetch: async (uri: RequestInfo, options: RequestInit) => {\r\n        if (!options.headers) {\r\n            options.headers = {} as Record<string, string>;\r\n        }\r\n        const accessToken = await getValidAccessToken();\r\n        const authenticatedOptions: RequestInit = {\r\n            ...options,\r\n            headers: {\r\n            ...options.headers,\r\n            Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }\r\n        return fetch(uri, authenticatedOptions);\r\n        },\r\n    }),\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n\r\nexport const DatabaseContext = React.createContext({});\r\nexport const DatabaseProvider = ({children}: any) => {\r\n    return (\r\n        <ApolloProvider client={client}>{children}</ApolloProvider>\r\n    )\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { DatabaseProvider } from './providers/databaseProvider';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router basename=\"/resume\">\r\n      <DatabaseProvider>\r\n        <App/>\r\n      </DatabaseProvider>\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
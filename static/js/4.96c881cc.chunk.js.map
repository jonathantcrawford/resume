{"version":3,"sources":["components/basic/Text.tsx","components/DBQueryResult.tsx","components/layout/FlexBox.tsx","components/basic/Link.tsx","components/navigation/NavLink.tsx","components/navigation/NavLinkGroup.tsx","factories/ContentFactory.tsx","themes/standard.tsx"],"names":["Text","props","type","theme","useTheme","React","createElement","styled","div","text","family","size","color","DBQueryResult","useQuery","gql","query","data","loading","error","render","JSON","stringify","FlexBox","flexDirection","alignItems","children","Children","map","child","index","cloneElement","style","padding","key","Link","a","link","hover","NavLink","_NavLink","navlink","NavLinkGroup","useState","isOpen","setIsOpen","links","to","base","display","paddingTop","navlinkgroup","onClick","paddingRight","icon","faAngleDown","faAngleRight","name","ContentFactory","contentSchematic","template","content","lazy","Promise","all","resolve","setTimeout","then","fallback","Layout","Sidebar","href","target","View","path","match","substring","params","company","displayDataTypes","src","work_experience","component","title","project","Theme","configs","_","default","brand","tagline","social","button","backgroundColor","basename"],"mappings":"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","file":"static/js/4.96c881cc.chunk.js","sourcesContent":["import React from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from \"@emotion/styled\";\n\nconst Text = (props: any) => {\n    const type = props.type || 'default';\n    const theme: any = useTheme();\n    return React.createElement(styled.div`\n        font-family: ${theme.text[type].family};\n        font-size: ${theme.text[type].size};\n        color: ${theme.text[type].color};\n    `, props);\n}\n\nexport default Text;","import React from 'react';\nimport { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport Text from '../components/basic/Text';\n\n\nconst DBQueryResult = (props: any) => {\n    const {data, loading, error} = useQuery(gql(props.query));\n    if (loading) return (<Text>loading from db</Text>);\n    if (data && props.render) return props.render({data, loading, error})\n    return (<code>{JSON.stringify(data)}</code>);\n}\nexport default DBQueryResult;","import React from 'react';\nimport styled from \"@emotion/styled\";\n\nconst FlexBox = (props: any) => {\n    return React.createElement(styled.div`\n        display: flex;\n        flex-direction: ${props.flexDirection};\n        ${props.alignItems ? `align-items: ${props.alignItems};`: ''}\n        padding: 20px;\n    `, {...props, children: \n        [React.Children.map(props.children, (child, index) => {\n            return React.cloneElement(child, {style: {...child.props.style,padding: '20px'}, key:index})\n        } )]\n    \n    });\n}\nexport default FlexBox;","import React from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from \"@emotion/styled\";\n\nconst Link = (props: any) => {\n    const type = props.type || 'default';\n    const theme: any = useTheme();\n    return React.createElement(styled.a`\n        font-family: ${theme.link[type].family};\n        font-size: ${theme.link[type].size};\n        color: ${theme.link[type].color};\n        &:hover {\n            cursor: pointer;\n            color: ${theme.link[type].hover.color};\n        }\n    `, props);\n}\n\nexport default Link;","import React from 'react';\nimport {NavLink as _NavLink} from 'react-router-dom';\nimport {useTheme} from '@emotion/react';\nimport styled from \"@emotion/styled\";\n\nconst NavLink = (props: any) => {\n    const type = props.type || 'default';\n    const theme: any = useTheme();\n    return React.createElement(styled(_NavLink)`\n        font-family: ${theme.navlink[type].family};\n        font-size: ${theme.navlink[type].size};\n        color: ${theme.navlink[type].color};\n        &:hover {\n            cursor: pointer;\n            color: ${theme.link[type].hover.color};\n        }\n    `, props);\n}\n\nexport default NavLink;","import React, {useState} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleRight, faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport {useTheme} from '@emotion/react';\nimport styled from \"@emotion/styled\";\n\nconst NavLinkGroup = (props: any) => {\n    const type = props.type || 'default';\n    const theme: any = useTheme();\n    const [isOpen, setIsOpen] = useState(true);\n\n    const onClick = () => {\n        setIsOpen(!isOpen);\n    }\n\n    const links = React.Children.map(props.children, (child, index) => {\n        return React.cloneElement(child, {\n            ...child.props, \n            key:index, \n            to: props.base + child.props.to, \n            style: {display: isOpen ? 'block' : 'none', paddingTop: '5px'}\n        })\n    } );\n\n    return React.createElement(styled.div`\n        font-family: ${theme.navlinkgroup[type].family};\n        font-size: ${theme.navlinkgroup[type].size};\n        color: ${theme.navlinkgroup[type].color};\n        &:hover {\n            cursor: pointer;\n            color: ${theme.navlinkgroup[type].hover.color}\n        }\n    `, {...props, children: \n        <>\n            <div style={{display: 'flex', flexDirection:'row', alignItems:'center',}} onClick={onClick}>\n                <div style={{paddingRight: '5px'}}><FontAwesomeIcon icon={isOpen ? faAngleDown : faAngleRight}/></div>\n                <div>{props.name}</div>\n            </div>\n            {links}\n        </>\n    });\n}\n\nexport default NavLinkGroup;","import React, {Suspense} from 'react';\nimport Text from '../components/basic/Text';\n\n\nconst ContentFactory = ({contentSchematic}: {contentSchematic: any}) => {\n\n  const {template, data} = contentSchematic;\n\n  const content = (() => {\n    switch (template) {\n      case \"about\":\n        return React.createElement(React.lazy(() => {\n          return Promise.all([\n            import(\"../content/About\"),\n            new Promise(resolve => setTimeout(resolve, 300))\n          ])\n          .then(([moduleExports]) => moduleExports);\n        }\n        ), {data});\n      default:\n        return <Text>content template does not exist</Text>;\n    }\n  })();\n\n  return (\n    <Suspense fallback={<Text>building content</Text>}>\n      {content}\n    </Suspense>\n  )\n}\nexport default ContentFactory;","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport * as _ from 'lodash';\nimport {ThemeProvider} from '@emotion/react';\nimport DBQueryResult from '../components/DBQueryResult';\nimport styled from \"@emotion/styled\";\n\n\nimport FlexBox from '../components/layout/FlexBox';\nimport Text from '../components/basic/Text';\nimport Link from '../components/basic/Link';\nimport NavLink from '../components/navigation/NavLink';\nimport NavLinkGroup from '../components/navigation/NavLinkGroup';\nimport ReactJson from 'react-json-view'\nimport ContentFactory from '../factories/ContentFactory';\n\n\n\nconst Theme = ({configs}: {configs: any}) => {\n    const defaultConfigs = {\n        text: {\n            default: {\n                family: \"'Fira Mono', monospace\",\n                size: \"12px\",\n                color: 'black'\n            },\n            brand: {\n                family: \"'Fira Mono', monospace\",\n                size: \"24px\",\n                color: '#000000'\n            },\n            tagline: {\n                family: \"'Fira Mono', monospace\",\n                size: \"16px\",\n                color: '#666666'\n            }\n        },\n        link: {\n            default: {\n                family: \"'Fira Mono', monospace\",\n                size: \"10px\",\n                color: '#666666',\n                hover: {\n                    color: '#AAAAAA',\n                }\n            },\n            social: {\n                family: \"'Fira Mono', monospace\",\n                size: \"14px\",\n                color: '#666666',\n                hover: {\n                    color: '#AAAAAA',\n                }\n            }\n        },\n        navlink: {\n            default: {\n                family: \"'Fira Mono', monospace\",\n                size: \"18px\",\n                color: '#666666',\n                hover: {\n                    color: '#AAAAAA',\n                }\n            },\n        },\n        navlinkgroup: {\n            default: {\n                family: \"'Fira Mono', monospace\",\n                size: \"18px\",\n                color: '#666666',\n                hover: {\n                    color: '#AAAAAA',\n                }\n            }\n        },\n        button: {\n            default: {\n                family: \"'Fira Mono', monospace\",\n                size: \"16px\",\n                color: 'red',\n                backgroundColor: 'yellow',\n                hover: {\n                    color: 'blue',\n                    backgroundColor: 'orange',\n                }\n            }\n        }\n    };\n\n    /**\n     * Could add a function here to validate theme schema.\n     * if (!valid) return <div>theme type</div>\n     */\n\n\n    return (\n        <ThemeProvider theme={_.defaultsDeep(configs,defaultConfigs)}>\n            <Router basename=\"/\">\n                <Layout>\n                    <Layout.Sidebar/>\n                    <Layout.View/>\n                </Layout>\n            </Router>\n        </ThemeProvider>\n    );\n}\n\nconst Layout = (props: any) => {\n    // const theme: any = useTheme();\n    return React.createElement(styled.div`\n        height: 100vh;\n        display: grid;\n        grid-template-rows: 2fr 1fr 7fr;\n        grid-template-columns: 2fr 5fr;\n    `, props);\n};\n\nLayout.Sidebar = (props: any) => {\n    return React.createElement(styled.div`\n        grid-row: 1 / 4;\n        grid-column: 1 / 2;\n    `, {...props, children: \n        <>\n            <FlexBox flexDirection=\"column\">\n                <Text type=\"brand\">Jon Crawford</Text>\n                <Text type=\"tagline\">Software Engineer</Text>\n            </FlexBox>\n            <FlexBox flexDirection=\"column\">\n                <NavLink to='/about'>About</NavLink>\n                <NavLinkGroup name='Work Experience' base='/work-experience'>\n                    <NavLink to='/bryx'>Bryx</NavLink>\n                    <NavLink to='/catertrax'>CaterTrax</NavLink>\n                </NavLinkGroup>\n                <NavLinkGroup name='Projects' base='/projects'>\n                    <NavLink to='/resume'>Resume</NavLink>\n                    <NavLink to='/todo-app'>Todo App</NavLink>\n                    <NavLink to='/nfl-pickem'>NFL Pickem</NavLink>\n                    <NavLink to='/simplescope'>VST Plugin: SimpleScope</NavLink>\n                    <NavLink to='/3d-audio-demo'>3D Audio Demo</NavLink>\n                </NavLinkGroup>\n            </FlexBox>\n            <FlexBox flexDirection=\"row\">\n                <Link type=\"social\" href='https://www.linkedin.com/in/jonathantcrawford/' target=\"_blank\">LinkedIn</Link>\n                <Link type=\"social\" href='https://github.com/jonathantcrawford' target='_blank'>GitHub</Link>\n            </FlexBox>\n        </>\n    });\n}\n\nLayout.View = (props: any) => {\n    return React.createElement(styled.div`\n        grid-row: 1 / 4;\n        grid-column: 2 / 3;\n    `, {...props, children: \n        <Switch>\n            <Route path=\"/about\"\n                    render={(props: any) => (\n                        <DBQueryResult \n                            {...props} \n                            query={`\n                                query {\n                                    content(query: { AND: [{ template: \"${props.match.path.substring(1)}\" }] }) {\n                                        template\n                                        data {\n                                            headshot_url\n                                        }\n                                    }\n                                }\n                            `}\n                            render={({data}: any) => <ContentFactory contentSchematic={data.content}/> }\n                            />\n                    )}\n                />\n            <Route path=\"/work-experience/:company\"\n                    render={(props: any) => (\n                        <DBQueryResult \n                            {...props} \n                            query={`\n                                query {\n                                    work_experience(query: { AND: [{ slug: \"${props.match.params.company}\" }] }) {\n                                    company\n                                    role\n                                    location\n                                    duration\n                                    highlights\n                                    }\n                                }\n                            `}\n                            render={({data}: any) => <ReactJson theme='shapeshifter:inverted' displayDataTypes={false} src={data.work_experience} />}\n                            />\n                    )}\n                />\n            <Route path=\"/projects/:title\" \n                    component={(props: any) => (\n                        <DBQueryResult \n                            {...props} \n                            query={`\n                                query {\n                                    project(query: { AND: [{ slug: \"${props.match.params.title}\" }] }) {\n                                        title\n                                        links {\n                                            title\n                                            url\n                                        }\n                                        highlights\n                                        date\n                                        tools\n                                    }\n                                }\n                            `}\n                            render={({data}: any) => <ReactJson theme='shapeshifter:inverted' displayDataTypes={false} src={data.project} />}\n                            />\n                    )}\n                />\n            <Route path=\"*\"> \n                <Redirect to=\"/about\" />\n            </Route>\n        </Switch>\n    });\n}\n\nexport default Theme;\n\n"],"sourceRoot":""}
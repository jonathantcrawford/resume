{"version":3,"sources":["components/ContactInfo.tsx","components/Experience.tsx","components/Projects.tsx","components/Skills.tsx","components/Resume.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Contact","contact_info","links","map","link","index","Link","key","href","url","title","ContactUnOrderedList","ContactListItem","Name","first_name","last_name","Email","email","Phone","phone","styled","ul","li","div","a","Experience","jobs","experience","job","ExperienceStyled","Company","company","Role","role","Duration","duration","Location","location","Highlights","highlights","highlight","Highlight","reverse","ExperienceContainer","Projects","projects","Skills","skills","languages","language","frameworks","framework","dev_tools","dev_tool","SkillsContainer","SkillList","SkillType","StyledHr","hr","Resume","useQuery","gql","loading","error","data","ResumeStyled","content","App","props","AppContainer","Boolean","window","hostname","match","graphql_url","app","Realm","id","getValidAccessToken","currentUser","logIn","anonymous","refreshCustomData","accessToken","client","ApolloClient","HttpLink","uri","fetch","options","headers","authenticatedOptions","Authorization","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.411cbbb1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface ContactProps {\r\n  contact_info: {\r\n    first_name: any,\r\n    last_name: any,\r\n    email: any,\r\n    phone: any,\r\n    links: [{\r\n      title: any,\r\n      url: any\r\n    }]\r\n  }\r\n}\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Contact({contact_info}: ContactProps) {\r\n  const links = contact_info.links.map((link,index) => <Link key={index} href={link.url}>{link.title}</Link>);\r\n  return (\r\n    <ContactUnOrderedList>\r\n        <ContactListItem>\r\n          <Name>{contact_info.first_name} {contact_info.last_name}</Name>\r\n          <Email>{contact_info.email}</Email>\r\n          <Phone>{contact_info.phone}</Phone>\r\n        </ContactListItem>\r\n        <ContactListItem>\r\n          {links}\r\n        </ContactListItem>\r\n    </ContactUnOrderedList>\r\n  );\r\n}\r\n\r\nconst ContactUnOrderedList = styled.ul`\r\n  box-sizing: border-box;\r\n  list-style-type: none;\r\n  background-color: #bbb;\r\n  min-height: 10vh;\r\n  max-width: 100%;\r\n  margin: 0px;\r\n  padding: 2vh 4vw 4vh 4vw;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-content: flex-start;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n  font-size: calc(12px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst ContactListItem = styled.li`\r\n  margin: 1vh 5vw 0 5vw;\r\n  align-self: flex-end;\r\n  display: inline-block;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  font-size: calc(16px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Email = styled.div`\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Phone = styled.div`\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Link = styled.a`\r\n  margin-right: 15px;\r\n  font-size: calc(10px + 2vmin);\r\n  color: black;\r\n`;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface ExperienceProps {\r\n  experience: [{\r\n    company: any,\r\n    duration: any,\r\n    highlights: [],\r\n    location: any,\r\n    role: any\r\n  }]\r\n}\r\n\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Experience({experience}: ExperienceProps) {\r\n  const jobs = experience.map((job, index) => {\r\n  return (\r\n  <ExperienceStyled key={index}>\r\n    <Company>{job.company}</Company>\r\n    <Role>{job.role}</Role>\r\n    <Duration>{job.duration}</Duration>\r\n    <Location>{job.location}</Location>\r\n    <Highlights>\r\n      {job.highlights.map((highlight, index) => <Highlight key={index}>{highlight}</Highlight>)}\r\n    </Highlights>\r\n  </ExperienceStyled>);\r\n}).reverse();\r\n  return (\r\n    <ExperienceContainer>\r\n        {jobs}\r\n    </ExperienceContainer>\r\n  );\r\n}\r\n\r\nconst ExperienceContainer = styled.div`\r\n  background-color: #fff;\r\n  max-width: 100%;\r\n  margin: 0px;\r\n  padding: 8vh 4vw 0 4vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst ExperienceStyled = styled.div`\r\n  margin: 0 5vw 5vh 5vw;\r\n`;\r\n\r\nconst Company = styled.div`\r\n  font-size: calc(10px + 2vmin);\r\n`;\r\n\r\nconst Role = styled.div`\r\n  font-size: calc(8px + 2vmin);\r\n`;\r\n\r\nconst Duration = styled.div`\r\n  font-size: calc(8px + 2vmin);\r\n`;\r\n\r\nconst Location = styled.div`\r\n  font-size: calc(8px + 2vmin);\r\n`;\r\n\r\nconst Highlights = styled.ul`\r\n  padding-inline-start: 20px;\r\n`;\r\n\r\nconst Highlight = styled.li`\r\n  margin: 2vh 0 2vh 0;\r\n`;","import React from \"react\";\r\n\r\n\r\ninterface ProjectsProps {\r\n  projects: any\r\n}\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Projects({projects}: ProjectsProps) {\r\n  return (\r\n    <div>\r\n        {projects}\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface SkillsProps {\r\n  skills: {\r\n    languages: [],\r\n    frameworks: [],\r\n    dev_tools: []\r\n  }\r\n}\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Skills({skills}: SkillsProps) {\r\nconst languages = skills.languages.map((language,index) => <li key={index}>{language}</li>);\r\nconst frameworks = skills.frameworks.map((framework,index) => <li key={index}>{framework}</li>);\r\nconst dev_tools = skills.dev_tools.map((dev_tool,index) => <li key={index}>{dev_tool}</li>);\r\n  return (\r\n    <SkillsContainer>\r\n      <SkillList>\r\n        <SkillType>languages</SkillType>\r\n        <StyledHr></StyledHr>\r\n        {languages}\r\n      </SkillList>    \r\n      <SkillList>\r\n        <SkillType>frameworks</SkillType>\r\n        <StyledHr></StyledHr>\r\n        {frameworks}\r\n      </SkillList>\r\n      <SkillList>\r\n        <SkillType>dev_tools</SkillType>\r\n        <StyledHr></StyledHr>\r\n        {dev_tools}\r\n      </SkillList>\r\n    </SkillsContainer>\r\n  );\r\n}\r\n\r\nconst SkillsContainer = styled.div`\r\n  box-sizing: border-box;\r\n  background-color: #fff;\r\n  max-width: 100%;\r\n  padding: 8vh 4vw 0 4vw;\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst SkillList = styled.ul`\r\n  list-style-type: none;\r\n  margin: 0 5vw 5vh 5vw;\r\n  padding: 0;\r\n  font-size: calc(8px + 2vmin);\r\n  color: #888;\r\n`;\r\n\r\nconst SkillType = styled.li`\r\n  font-size: calc(10px + 2vmin);\r\n  color: #000;\r\n`;\r\n\r\nconst StyledHr = styled.hr`\r\n  width: 100%;\r\n  border: 1px solid #000;\r\n`;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\nimport ContactInfo from './ContactInfo';\r\nimport Experience from './Experience';\r\nimport Projects from './Projects';\r\nimport Skills from './Skills';\r\n\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Resume() {\r\n  const { loading, error, data } = useQuery(gql`\r\n    query {\r\n        content {\r\n            _id\r\n                contact_info {\r\n            email\r\n            first_name\r\n            last_name\r\n            links {\r\n                title\r\n                url\r\n            }\r\n            phone\r\n            }\r\n                education {\r\n            degree\r\n            duration\r\n            institution\r\n            }\r\n                experience {\r\n            company\r\n            duration\r\n            highlights\r\n            location\r\n            role\r\n            }\r\n            skills {\r\n            languages\r\n            frameworks\r\n            dev_tools\r\n            }\r\n        }\r\n    }\r\n  `);\r\n  if(loading) {\r\n    return <div>loading</div>\r\n  }\r\n  if(error) {\r\n    return <div>encountered an error: {error}</div>\r\n  }\r\n  return (\r\n    <ResumeStyled>\r\n      <ContactInfo contact_info={data.content.contact_info}/>\r\n      <Skills skills={data.content.skills}/>\r\n      <Experience experience={data.content.experience}/>\r\n      <Projects projects={data.content.projects}/>\r\n    </ResumeStyled>\r\n  );\r\n}\r\n\r\n\r\nconst ResumeStyled = styled.div`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  display: block;\r\n`;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Resume from './Resume';\r\n\r\n\r\n\r\nconst App: React.FC = (props) => {\r\n  return (\r\n    <AppContainer>\r\n      <Resume/>\r\n    </AppContainer>\r\n  );\r\n};\r\nexport default App;\r\n\r\nconst AppContainer = styled.div`\r\n  box-sizing: border-box;\r\n  background-color: #282c34;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport * as Realm from \"realm-web\";\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  HttpLink,\r\n  InMemoryCache\r\n} from \"@apollo/client\";\r\n\r\n\r\nconst REALM_APP_ID = \"resume-realm-nxcpz\"; // e.g. myapp-abcde\r\nconst graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${REALM_APP_ID}/graphql`;\r\nconst app: Realm.App = new Realm.App({ id: REALM_APP_ID });\r\n\r\nasync function getValidAccessToken() {\r\n  if (!app.currentUser) {\r\n    // If no user is logged in, log in an anonymous user\r\n    await app.logIn(Realm.Credentials.anonymous());\r\n  } else {\r\n    // The logged in user's access token might be stale,\r\n    // Refreshing custom data also refreshes the access token\r\n    await app.currentUser.refreshCustomData();\r\n  }\r\n  // Get a valid access token for the current user\r\n  return app.currentUser?.accessToken;\r\n}\r\n\r\nconst client = new ApolloClient({\r\n  link: new HttpLink({\r\n    uri: graphql_url,\r\n    fetch: async (uri: RequestInfo, options: RequestInit) => {\r\n      if (!options.headers) {\r\n        options.headers = {} as Record<string, string>;\r\n      }\r\n      const accessToken = await getValidAccessToken();\r\n      const authenticatedOptions: RequestInit = {\r\n        ...options,\r\n        headers: {\r\n          ...options.headers,\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      }\r\n      return fetch(uri, authenticatedOptions);\r\n    },\r\n  }),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>,\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
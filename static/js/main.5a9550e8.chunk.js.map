{"version":3,"sources":["realm/RealmApp.tsx","realm/RealmApolloProvider.tsx","components/ContactInfo.tsx","components/Experience.tsx","components/Projects.tsx","components/Skills.tsx","components/Resume.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["app","Realm","id","RealmAppContext","React","undefined","RealmApp","children","appRef","currentUser","user","setUser","current","registerUser","email","password","a","emailPasswordAuth","context","logIn","credentials","emailPassword","logOut","Provider","value","useRealmApp","Error","RealmApolloProvider","createApolloClient","client","setClient","realmAppId","graphql_url","ApolloClient","link","HttpLink","uri","fetch","options","headers","refreshCustomData","authenticatedOptions","Authorization","accessToken","cache","InMemoryCache","Contact","contact_info","links","map","index","Link","key","title","href","url","ContactContainer","Name","first_name","last_name","Email","Phone","phone","styled","div","Experience","jobs","experience","job","duration","role","company","location","highlights","highlight","ExperienceContainer","Projects","projects","Skills","skills","languages","language","frameworks","framework","dev_tools","dev_tool","SkillsContainer","Resume","useQuery","gql","loading","error","data","content","App","props","AppContainer","RequireAuthentication","console","log","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5a9550e8.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\n\r\nconst REALM_APP_ID = \"resume-realm-nxcpz\";\r\nconst app = new Realm.App({ id: REALM_APP_ID });\r\n\r\nconst RealmAppContext = React.createContext<IRealmApp | void>(undefined);\r\n\r\ninterface IRealmApp {\r\n  id: string;\r\n  user: Realm.User | null;\r\n  logIn: (email: string, password: string) => Promise<void>;\r\n  logOut: () => Promise<void>;\r\n  registerUser(email: string, password: string): Promise<void>;\r\n}\r\n\r\nconst RealmApp: React.FC = ({ children }) => {\r\n  // Keep track of the current user in local state\r\n  const appRef = React.useRef(app);\r\n  const [user, setUser] = React.useState(app.currentUser);\r\n  React.useEffect(() => {\r\n    setUser(app.currentUser);\r\n  }, [appRef.current.currentUser]);\r\n  \r\n  // Let new users register an account\r\n  const registerUser = async (email: string, password: string) => {\r\n    return await app.emailPasswordAuth.registerUser(email, password);\r\n  }\r\n  \r\n  // Let registered users log in\r\n  const logIn = async (email: string, password: string) => {\r\n    const credentials = Realm.Credentials.emailPassword(email, password);\r\n    await app.logIn(credentials);\r\n    setUser(app.currentUser);\r\n  }\r\n  \r\n  // Let logged in users log out\r\n  const logOut = async () => {\r\n    await app.currentUser?.logOut();\r\n    setUser(app.currentUser);\r\n  }\r\n  \r\n  // Provide the current user and authentication methods to the wrapped tree\r\n  const context: IRealmApp = {\r\n    id: REALM_APP_ID,\r\n    user,\r\n    logIn,\r\n    logOut,\r\n    registerUser,\r\n  };\r\n  return (\r\n    <RealmAppContext.Provider value={context}>\r\n      {children}\r\n    </RealmAppContext.Provider>\r\n  );\r\n};\r\nexport default RealmApp;\r\n\r\nexport const useRealmApp = (): IRealmApp => {\r\n  const app = React.useContext(RealmAppContext);\r\n  if (!app) {\r\n    throw new Error(\"You must call useRealmApp() inside of a <RealmApp />.\");\r\n  }\r\n  return app;\r\n};\r\n","import * as React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport { useRealmApp } from \"./RealmApp\";\r\n\r\n// Apollo\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  HttpLink,\r\n  InMemoryCache,\r\n} from \"@apollo/client\";\r\nimport { NormalizedCacheObject } from \"@apollo/client/cache\";\r\n\r\nconst RealmApolloProvider: React.FC = ({ children }) => {\r\n  const { id, user } = useRealmApp();\r\n  const [client, setClient] = React.useState(\r\n    createApolloClient(id, user as Realm.User)\r\n  );\r\n  React.useEffect(() => {\r\n    setClient(createApolloClient(id, user as Realm.User));\r\n  }, [id, user]);\r\n\r\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\r\n};\r\nexport default RealmApolloProvider;\r\n\r\n// TODO: Implement createApolloClient()\r\nfunction createApolloClient(\r\n  realmAppId: string,\r\n  user: Realm.User\r\n): ApolloClient<NormalizedCacheObject> {\r\n  const graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${realmAppId}/graphql`;\r\n  \r\n  const client = new ApolloClient({\r\n    link: new HttpLink({\r\n      uri: graphql_url,\r\n      fetch: async (uri: RequestInfo, options: RequestInit) => {\r\n        if (!options.headers) {\r\n          options.headers = {} as Record<string, string>;\r\n        }\r\n        // Refreshing custom data also ensures a valid access token\r\n        await user.refreshCustomData();\r\n        const authenticatedOptions: RequestInit = {\r\n          ...options,\r\n          headers: {\r\n            ...options.headers,\r\n            Authorization: `Bearer ${user.accessToken}`\r\n          }\r\n        }\r\n        return fetch(uri, authenticatedOptions);\r\n      },\r\n    }),\r\n    cache: new InMemoryCache(),\r\n  });\r\n\r\n  return client\r\n}\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface ContactProps {\r\n  contact_info: {\r\n    first_name: any,\r\n    last_name: any,\r\n    email: any,\r\n    phone: any,\r\n    links: [{\r\n      title: any,\r\n      url: any\r\n    }]\r\n  }\r\n}\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Contact({contact_info}: ContactProps) {\r\n  const links = contact_info.links.map((link,index) => <Link key={index}>{link.title}: <a href={link.url}>{link.url}</a></Link>);\r\n  return (\r\n    <ContactContainer>\r\n        <ul>\r\n          <Name>{contact_info.first_name} {contact_info.last_name}</Name>\r\n          <Email>{contact_info.email}</Email>\r\n          <Phone>{contact_info.phone}</Phone>\r\n        </ul>\r\n        <ul>\r\n          {links}\r\n        </ul>\r\n    </ContactContainer>\r\n  );\r\n}\r\n\r\nconst ContactContainer = styled.div`\r\n  background-color: #bbb;\r\n  min-height: 20vh;\r\n  max-width: 100vw;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-end;\r\n  justify-content: space-between;\r\n  font-size: calc(10px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  font-size: calc(12px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Email = styled.div`\r\n  font-size: calc(4px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Phone = styled.div`\r\n  font-size: calc(4px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Link = styled.div`\r\n  font-size: calc(4px + 2vmin);\r\n  color: black;\r\n`;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface ExperienceProps {\r\n  experience: [{\r\n    company: any,\r\n    duration: any,\r\n    highlights: [],\r\n    location: any,\r\n    role: any\r\n  }]\r\n}\r\n\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Experience({experience}: ExperienceProps) {\r\nconst jobs = experience.map((job, index) => {\r\n  return (\r\n  <div key={index}>\r\n    <div>{job.duration}</div>\r\n    <div>{job.role}</div>\r\n    <div>{job.company}</div>\r\n    <div>{job.location}</div>\r\n    <ul>\r\n      {job.highlights.map((highlight, index) => <li key={index}>{highlight}</li>)}\r\n    </ul>\r\n  </div>);\r\n});\r\n  return (\r\n    <ExperienceContainer>\r\n        {jobs}\r\n    </ExperienceContainer>\r\n  );\r\n}\r\n\r\nconst ExperienceContainer = styled.div`\r\n  background-color: #fff;\r\n  max-width: 100vw;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;","import React from \"react\";\r\n\r\n\r\ninterface ProjectsProps {\r\n  projects: any\r\n}\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Projects({projects}: ProjectsProps) {\r\n  return (\r\n    <div>\r\n        {projects}\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface SkillsProps {\r\n  skills: {\r\n    languages: [],\r\n    frameworks: [],\r\n    dev_tools: []\r\n  }\r\n}\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Skills({skills}: SkillsProps) {\r\nconst languages = skills.languages.map((language,index) => <li key={index}>{language}</li>);\r\nconst frameworks = skills.frameworks.map((framework,index) => <li key={index}>{framework}</li>);\r\nconst dev_tools = skills.dev_tools.map((dev_tool,index) => <li key={index}>{dev_tool}</li>);\r\n  return (\r\n    <SkillsContainer>\r\n        <ul>{languages}</ul>\r\n        <ul>{frameworks}</ul>\r\n        <ul>{dev_tools}</ul>\r\n    </SkillsContainer>\r\n  );\r\n}\r\n\r\nconst SkillsContainer = styled.div`\r\n  background-color: #fff;\r\n  max-width: 100vw;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;","import React from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\nimport ContactInfo from './ContactInfo';\r\nimport Experience from './Experience';\r\nimport Projects from './Projects';\r\nimport Skills from './Skills';\r\n\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Resume() {\r\n  const { loading, error, data } = useQuery(gql`\r\n    query {\r\n        content {\r\n            _id\r\n                contact_info {\r\n            email\r\n            first_name\r\n            last_name\r\n            links {\r\n                title\r\n                url\r\n            }\r\n            phone\r\n            }\r\n                education {\r\n            degree\r\n            duration\r\n            institution\r\n            }\r\n                experience {\r\n            company\r\n            duration\r\n            highlights\r\n            location\r\n            role\r\n            }\r\n            skills {\r\n            languages\r\n            frameworks\r\n            dev_tools\r\n            }\r\n        }\r\n    }\r\n  `);\r\n  if(loading) {\r\n    return <div>loading</div>\r\n  }\r\n  if(error) {\r\n    return <div>encountered an error: {error}</div>\r\n  }\r\n  return (\r\n    <div>\r\n      <ContactInfo contact_info={data.content.contact_info}/>\r\n      <Skills skills={data.content.skills}/>\r\n      <Experience experience={data.content.experience}/>\r\n      <Projects projects={data.content.projects}/>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport RealmApp, { useRealmApp } from \"../realm/RealmApp\";\r\nimport RealmApolloProvider from \"../realm/RealmApolloProvider\";\r\nimport Resume from './Resume';\r\n\r\n\r\n\r\nconst App: React.FC = (props) => {\r\n  return (\r\n    <RealmApp>\r\n      <AppContainer>\r\n        <RequireAuthentication />\r\n      </AppContainer>\r\n    </RealmApp>\r\n  );\r\n};\r\nexport default App;\r\n\r\nconst AppContainer = styled.div`\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  max-width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\n\r\nfunction RequireAuthentication() {\r\n  const app = useRealmApp();\r\n  if (!app) {\r\n    return <div>Loading</div>;\r\n  }\r\n  console.log(app);\r\n  return app.user ? (\r\n    <RealmApolloProvider>\r\n      <Resume/>\r\n    </RealmApolloProvider>\r\n  ): <div>encountered an error</div> ;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
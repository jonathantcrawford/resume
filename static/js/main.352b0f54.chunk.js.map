{"version":3,"sources":["factories/ThemeFactory.tsx","containers/App.tsx","serviceWorker.ts","providers/databaseProvider.tsx","index.tsx"],"names":["ThemeFactory","themeSchematic","type","configs","theme","React","createElement","lazy","Promise","all","resolve","setTimeout","then","fallback","App","traditionalThemeSchematic","standardThemeSchematic","invalidThemeTypeSchematic","useState","setThemeSchematic","Boolean","window","location","hostname","match","REALM_APP_ID","graphql_url","app","Realm","id","getValidAccessToken","a","currentUser","logIn","anonymous","refreshCustomData","accessToken","client","ApolloClient","link","HttpLink","uri","fetch","options","headers","authenticatedOptions","Authorization","cache","InMemoryCache","DatabaseProvider","children","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kNAwCeA,EAnCM,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,eAEdC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,QAEPC,EAAS,WACb,OAAQF,GACN,IAAK,WACH,OAAOG,IAAMC,cAAcD,IAAME,MAAK,WACpC,OAAOC,QAAQC,IAAI,CACjB,oDACA,IAAID,SAAQ,SAAAE,GAAO,OAAIC,WAAWD,EAAS,UAE5CE,MAAK,6CAEL,CAACT,YACN,IAAK,cACH,OAAOE,IAAMC,cAAcD,IAAME,MAAK,WACpC,OAAOC,QAAQC,IAAI,CACjB,oDACA,IAAID,SAAQ,SAAAE,GAAO,OAAIC,WAAWD,EAAS,UAE5CE,MAAK,6CAEL,CAACT,YACN,QACE,OAAO,6DArBE,GAyBf,OACE,cAAC,WAAD,CAAUU,SAAU,iDAApB,SACGT,KCOQU,EArCH,WAEV,IAAMC,EAA4B,CAChCb,KAAM,cACNC,QAAS,IAGLa,EAAyB,CAC7Bd,KAAM,WACNC,QAAS,IAGLc,EAA4B,CAChCf,KAAM,UACNC,QAAS,IAdK,EAiB4Be,mBAASF,GAjBrC,mBAiBTf,EAjBS,KAiBOkB,EAjBP,KAqBd,WAOF,OACE,mCAEE,cAAC,EAAD,CAAclB,eAAgBA,OCzBhBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kDCTAC,EAAe,qBACfC,EAAW,wDAAoDD,EAApD,YAEXE,EAAiB,IAAIC,IAAU,CAAEC,GAAIJ,IACrCK,EAAmB,uCAAG,4BAAAC,EAAA,yDACnBJ,EAAIK,YADe,gCAGdL,EAAIM,MAAML,IAAkBM,aAHd,6CAOdP,EAAIK,YAAYG,oBAPF,0CAUjBR,EAAIK,mBAVa,aAUjB,EAAiBI,aAVA,2CAAH,qDAanBC,EAAS,IAAIC,eAAa,CAC5BC,KAAM,IAAIC,WAAS,CACfC,IAAKf,EACLgB,MAAM,SAAD,sGAAC,CAAD,uCAAE,WAAOD,EAAkBE,GAAzB,iBAAAZ,EAAA,6DACFY,EAAQC,UACTD,EAAQC,QAAU,IAFf,SAImBd,IAJnB,cAIDM,EAJC,OAKDS,EALC,2BAMAF,GANA,IAOHC,QAAQ,2BACLD,EAAQC,SADJ,IAEPE,cAAc,UAAD,OAAYV,OATtB,kBAYAM,MAAMD,EAAKI,IAZX,2CAAF,2DAeTE,MAAO,IAAIC,kBAKFC,EAAmB,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,SAE9B,OADAC,QAAQC,IAAI,wBAER,cAAC,iBAAD,CAAgBf,OAAQA,EAAxB,SAAiCa,KCzCzCG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SF0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAMC,c","file":"static/js/main.352b0f54.chunk.js","sourcesContent":["import React, {Suspense} from 'react';\n\n\n\n\nconst ThemeFactory = ({themeSchematic}: {themeSchematic: any}) => {\n\n  const {type, configs} = themeSchematic;\n\n  const theme = (() => {\n    switch (type) {\n      case \"standard\":\n        return React.createElement(React.lazy(() => {\n          return Promise.all([\n            import(\"../themes/Standard\"),\n            new Promise(resolve => setTimeout(resolve, 1000))\n          ])\n          .then(([moduleExports]) => moduleExports);\n        }\n        ), {configs});\n      case \"traditional\":\n        return React.createElement(React.lazy(() => {\n          return Promise.all([\n            import(\"../themes/Traditional\"),\n            new Promise(resolve => setTimeout(resolve, 1000))\n          ])\n          .then(([moduleExports]) => moduleExports);\n        }\n        ), {configs});\n      default:\n        return <div>theme type does not exist</div>;\n    }\n  })();\n\n  return (\n    <Suspense fallback={<div>Building Theme</div>}>\n      {theme}\n    </Suspense>\n  )\n}\nexport default ThemeFactory;","import React, {useState} from \"react\";\n\n\nimport ThemeFactory from '../factories/ThemeFactory';\n\n\nconst App = () => {\n\n  const traditionalThemeSchematic = {\n    type: 'traditional',\n    configs: {}\n  };\n\n  const standardThemeSchematic = {\n    type: 'standard',\n    configs: {}\n  };\n\n  const invalidThemeTypeSchematic = {\n    type: 'invalid',\n    configs: {}\n  }\n\n  const [themeSchematic, setThemeSchematic] = useState(standardThemeSchematic);\n\n  \n  const themeSwitcher = (\n    <>\n      <div onClick={() => setThemeSchematic(standardThemeSchematic)}>standard</div>\n      <div onClick={() => setThemeSchematic(traditionalThemeSchematic)}>traditional</div>\n      <div onClick={() => setThemeSchematic(invalidThemeTypeSchematic)}>invalid theme</div>\n    </>\n  );\n  \n  return (\n    <>\n\n      <ThemeFactory themeSchematic={themeSchematic}/>\n    </>\n  );\n};\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport * as Realm from \"realm-web\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  HttpLink,\n  InMemoryCache\n} from \"@apollo/client\";\n\nconst REALM_APP_ID = \"resume-realm-nxcpz\"; // e.g. myapp-abcde\nconst graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${REALM_APP_ID}/graphql`;\n\nconst app: Realm.App = new Realm.App({ id: REALM_APP_ID });\nconst getValidAccessToken = async () => {\n    if (!app.currentUser) {\n        // If no user is logged in, log in an anonymous user\n        await app.logIn(Realm.Credentials.anonymous());\n    } else {\n        // The logged in user's access token might be stale,\n        // Refreshing custom data also refreshes the access token\n        await app.currentUser.refreshCustomData();\n    }\n    // Get a valid access token for the current user\n    return app.currentUser?.accessToken;\n}\n  \nconst client = new ApolloClient({\n    link: new HttpLink({\n        uri: graphql_url,\n        fetch: async (uri: RequestInfo, options: RequestInit) => {\n        if (!options.headers) {\n            options.headers = {} as Record<string, string>;\n        }\n        const accessToken = await getValidAccessToken();\n        const authenticatedOptions: RequestInit = {\n            ...options,\n            headers: {\n            ...options.headers,\n            Authorization: `Bearer ${accessToken}`\n            }\n        }\n        return fetch(uri, authenticatedOptions);\n        },\n    }),\n    cache: new InMemoryCache()\n});\n\n\nexport const DatabaseContext = React.createContext({});\nexport const DatabaseProvider = ({children}: any) => {\n    console.log('building db provider');\n    return (\n        <ApolloProvider client={client}>{children}</ApolloProvider>\n    )\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport 'semantic-ui-css/semantic.min.css'\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nimport { DatabaseProvider } from './providers/databaseProvider';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <DatabaseProvider>\n      <App/>\n    </DatabaseProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
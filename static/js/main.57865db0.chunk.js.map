{"version":3,"sources":["components/ContactInfo.tsx","components/Experience.tsx","components/Projects.tsx","components/Skills.tsx","components/Resume.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Contact","contact_info","links","map","link","index","Link","key","title","href","url","ContactContainer","Name","first_name","last_name","Email","email","Phone","phone","styled","div","Experience","jobs","experience","job","duration","role","company","location","highlights","highlight","ExperienceContainer","Projects","projects","Skills","skills","languages","language","frameworks","framework","dev_tools","dev_tool","SkillsContainer","Resume","useQuery","gql","loading","error","data","content","App","props","AppContainer","Boolean","window","hostname","match","graphql_url","app","Realm","id","getValidAccessToken","a","currentUser","logIn","anonymous","refreshCustomData","accessToken","client","ApolloClient","HttpLink","uri","fetch","options","headers","authenticatedOptions","Authorization","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.57865db0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface ContactProps {\r\n  contact_info: {\r\n    first_name: any,\r\n    last_name: any,\r\n    email: any,\r\n    phone: any,\r\n    links: [{\r\n      title: any,\r\n      url: any\r\n    }]\r\n  }\r\n}\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Contact({contact_info}: ContactProps) {\r\n  const links = contact_info.links.map((link,index) => <Link key={index}>{link.title}: <a href={link.url}>{link.url}</a></Link>);\r\n  return (\r\n    <ContactContainer>\r\n        <ul>\r\n          <Name>{contact_info.first_name} {contact_info.last_name}</Name>\r\n          <Email>{contact_info.email}</Email>\r\n          <Phone>{contact_info.phone}</Phone>\r\n        </ul>\r\n        <ul>\r\n          {links}\r\n        </ul>\r\n    </ContactContainer>\r\n  );\r\n}\r\n\r\nconst ContactContainer = styled.div`\r\n  background-color: #bbb;\r\n  min-height: 20vh;\r\n  max-width: 100vw;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-end;\r\n  justify-content: space-between;\r\n  font-size: calc(10px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  font-size: calc(12px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Email = styled.div`\r\n  font-size: calc(4px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Phone = styled.div`\r\n  font-size: calc(4px + 2vmin);\r\n  color: black;\r\n`;\r\n\r\nconst Link = styled.div`\r\n  font-size: calc(4px + 2vmin);\r\n  color: black;\r\n`;","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface ExperienceProps {\r\n  experience: [{\r\n    company: any,\r\n    duration: any,\r\n    highlights: [],\r\n    location: any,\r\n    role: any\r\n  }]\r\n}\r\n\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Experience({experience}: ExperienceProps) {\r\nconst jobs = experience.map((job, index) => {\r\n  return (\r\n  <div key={index}>\r\n    <div>{job.duration}</div>\r\n    <div>{job.role}</div>\r\n    <div>{job.company}</div>\r\n    <div>{job.location}</div>\r\n    <ul>\r\n      {job.highlights.map((highlight, index) => <li key={index}>{highlight}</li>)}\r\n    </ul>\r\n  </div>);\r\n});\r\n  return (\r\n    <ExperienceContainer>\r\n        {jobs}\r\n    </ExperienceContainer>\r\n  );\r\n}\r\n\r\nconst ExperienceContainer = styled.div`\r\n  background-color: #fff;\r\n  max-width: 100vw;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;","import React from \"react\";\r\n\r\n\r\ninterface ProjectsProps {\r\n  projects: any\r\n}\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Projects({projects}: ProjectsProps) {\r\n  return (\r\n    <div>\r\n        {projects}\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\ninterface SkillsProps {\r\n  skills: {\r\n    languages: [],\r\n    frameworks: [],\r\n    dev_tools: []\r\n  }\r\n}\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Skills({skills}: SkillsProps) {\r\nconst languages = skills.languages.map((language,index) => <li key={index}>{language}</li>);\r\nconst frameworks = skills.frameworks.map((framework,index) => <li key={index}>{framework}</li>);\r\nconst dev_tools = skills.dev_tools.map((dev_tool,index) => <li key={index}>{dev_tool}</li>);\r\n  return (\r\n    <SkillsContainer>\r\n        <ul>{languages}</ul>\r\n        <ul>{frameworks}</ul>\r\n        <ul>{dev_tools}</ul>\r\n    </SkillsContainer>\r\n  );\r\n}\r\n\r\nconst SkillsContainer = styled.div`\r\n  background-color: #fff;\r\n  max-width: 100vw;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  font-size: calc(8px + 2vmin);\r\n  color: black;\r\n`;","import React from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport gql from \"graphql-tag\";\r\nimport ContactInfo from './ContactInfo';\r\nimport Experience from './Experience';\r\nimport Projects from './Projects';\r\nimport Skills from './Skills';\r\n\r\n// Must be rendered inside of an ApolloProvider\r\nexport default function Resume() {\r\n  const { loading, error, data } = useQuery(gql`\r\n    query {\r\n        content {\r\n            _id\r\n                contact_info {\r\n            email\r\n            first_name\r\n            last_name\r\n            links {\r\n                title\r\n                url\r\n            }\r\n            phone\r\n            }\r\n                education {\r\n            degree\r\n            duration\r\n            institution\r\n            }\r\n                experience {\r\n            company\r\n            duration\r\n            highlights\r\n            location\r\n            role\r\n            }\r\n            skills {\r\n            languages\r\n            frameworks\r\n            dev_tools\r\n            }\r\n        }\r\n    }\r\n  `);\r\n  if(loading) {\r\n    return <div>loading</div>\r\n  }\r\n  if(error) {\r\n    return <div>encountered an error: {error}</div>\r\n  }\r\n  return (\r\n    <div>\r\n      <ContactInfo contact_info={data.content.contact_info}/>\r\n      <Skills skills={data.content.skills}/>\r\n      <Experience experience={data.content.experience}/>\r\n      <Projects projects={data.content.projects}/>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Resume from './Resume';\r\n\r\n\r\n\r\nconst App: React.FC = (props) => {\r\n  return (\r\n    <AppContainer>\r\n      <Resume/>\r\n    </AppContainer>\r\n  );\r\n};\r\nexport default App;\r\n\r\nconst AppContainer = styled.div`\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  max-width: 100vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport * as Realm from \"realm-web\";\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  HttpLink,\r\n  InMemoryCache\r\n} from \"@apollo/client\";\r\n\r\n\r\nconst REALM_APP_ID = \"resume-realm-nxcpz\"; // e.g. myapp-abcde\r\nconst graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${REALM_APP_ID}/graphql`;\r\nconst app: Realm.App = new Realm.App({ id: REALM_APP_ID });\r\n\r\nasync function getValidAccessToken() {\r\n  if (!app.currentUser) {\r\n    // If no user is logged in, log in an anonymous user\r\n    await app.logIn(Realm.Credentials.anonymous());\r\n  } else {\r\n    // The logged in user's access token might be stale,\r\n    // Refreshing custom data also refreshes the access token\r\n    await app.currentUser.refreshCustomData();\r\n  }\r\n  // Get a valid access token for the current user\r\n  return app.currentUser?.accessToken;\r\n}\r\n\r\nconst client = new ApolloClient({\r\n  link: new HttpLink({\r\n    uri: graphql_url,\r\n    fetch: async (uri: RequestInfo, options: RequestInit) => {\r\n      if (!options.headers) {\r\n        options.headers = {} as Record<string, string>;\r\n      }\r\n      const accessToken = await getValidAccessToken();\r\n      const authenticatedOptions: RequestInit = {\r\n        ...options,\r\n        headers: {\r\n          ...options.headers,\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      }\r\n      return fetch(uri, authenticatedOptions);\r\n    },\r\n  }),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ApolloProvider client={client}>\r\n      <App />\r\n    </ApolloProvider>,\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}